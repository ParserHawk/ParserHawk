////////////////////////////////////////////////////////////////
// pkt_hdr_vector.vp
//    Glen Gibb grg@stanford.edu
//
// Description:
//   Vector of extracted packet header fields
//
////////////////////////////////////////////////////////////////

//;# Import Libs
//; use POSIX ();
//; use Parser;
//;
//; # ===========
//; # PARAMETERS:
//; # ===========
//;
//; my $debug = parameter( name=>'Debug', val=>0,
//;                               doc=>'!DEBUG! Debug message output level',
//;                               min=>0 , max=>10, step=>1);
//; my $widthBits = parameter(name=>'Width', val=>"4096",
//;                           doc=>'!FUNCTIONAL! Field vector width (bits)');
//; my $inputs = parameter(name=>'NumInputs', val=>"12",
//;                           doc=>'!FUNCTIONAL! Number of single-byte inputs');
//; my $vectors = parameter(name=>'NumVectors', val=>"1",
//;                           doc=>'!FUNCTIONAL! Number of result vectors');
//;
//; # Verify the sanity of inputs
//; if ($widthBits % 8 != 0) {
//;     $self->error("Vector width must be a multiple of 8 bits. Specified: $widthBits")
//; }
//; 
//; my $widthBytes = $widthBits / 8;
//; my $dstWidth = log2($widthBits);
//; my $inputBinWidth = log2($inputs);
//; my $vectorBinWidth = log2($vectors);

import parser_pkg::*;

// Field output vector
module `mname()`
(
    output logic [0:`$widthBits-1`]  fields,
    output logic [0:`$widthBytes-1`] fields_vld,

    input logic [`$inputs-1`:0][`$dstWidth-1`:0] dst_addr,
    input logic [`$inputs-1`:0][7:0]    dst_data,
    input logic [`$inputs-1`:0]         dst_wr,

    input logic                         flush,

    //Global Signals
    input logic                 clk,                 // Clock
    input logic                 rst                  // Reset
);

////////////////////////////////////////
// Local variables
////////////////////////////////////////

logic [0:`$vectors-1`][0:`$widthBits-1`]        vector_op;
logic [0:`$vectors-1`][0:`$widthBytes-1`]       vector_op_vld;
logic [`$vectorBinWidth-1`:0]                   curr_vector;

logic [0:`$widthBytes-1`][`$inputs-1`:0]        wr_src_sel;
logic [0:`$widthBytes-1`]                       wr_en;
logic [0:`$widthBytes-1`][`$inputBinWidth-1`:0] wr_src;
logic [0:`$widthBytes-1`][7:0]                  wr_data;

////////////////////////////////////////
// Main logic
////////////////////////////////////////

// Vector instances
//; for (my $i = 0; $i < $vectors; $i++) {
//;     my $vector = generate('vector', "vector_$i",
//;                                 Width=>$widthBits,
//;                                 );
`$vector->instantiate()`
(
    .fields     (vector_op[`$i`]),
    .fields_vld (vector_op_vld[`$i`]),

    .we         (curr_vector == `fmtVal($i, $vectorBinWidth)`),

    .dst_data   (wr_data),
    .dst_wr     (wr_en),

    .flush      (flush),

    .clk        (clk),
    .rst        (rst)
);

//; }


// MUX + decoders
//; my $oneHotToBin = generate('onehot_to_bin', 'onehot_to_bin',
//;                             SrcWidth=>$inputs,
//;                             );
//;
//; # wr_en signals for each byte
//; for (my $i = 0; $i < $widthBytes; $i++) {
//;
//;     for (my $j = 0; $j < $inputs; $j++) {
assign wr_src_sel[`$i`][`$j`] = dst_wr[`$j`] && dst_addr[`$j`] == `$dstWidth`'d`$i`;
//;     }
assign wr_en[`$i`] = |wr_src_sel[`$i`];

//; }


//; # one-hot to binary decoders for each byte
//; for (my $i = 0; $i < $widthBytes; $i++) {
//;     my $oneHotToBinLocal = $oneHotToBin->clone("onthot_to_bin_$i");
`$oneHotToBinLocal->instantiate()`
(
    .src(wr_src_sel[`$i`]),
    .dst(wr_src[`$i`])
);

//; }

//; # muxes for each byte
//; for (my $i = 0; $i < $widthBytes; $i++) {
always_comb
begin
    wr_data[`$i`] = dst_data[wr_src[`$i`]];
end

//; }


// FIXME: Do better state tracking than this
// State machine to track the current vector to write
always_ff @(posedge clk or posedge rst)
begin
    if (rst)
        curr_vector <= '0;
    else if (flush) begin
        if (curr_vector == `fmtVal($vectors - 1, $vectorBinWidth)`)
            curr_vector <= '0;
        else
            curr_vector <= curr_vector + `fmtVal(1, $vectorBinWidth)`;
    end
end

assign fields = vector_op[curr_vector];
assign fields_vld = vector_op_vld[curr_vector];


////////////////////////////////////////
// Verification code
////////////////////////////////////////

// synthesis translate_off
// synopsys translate_off

// synopsys translate_on
// synthesis translate_on

endmodule : `mname`
