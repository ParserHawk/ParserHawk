////////////////////////////////////////////////////////////////
// extract_mux.vp
//    Glen Gibb grg@stanford.edu
//
// Description:
//   Data extraction MUX
//
////////////////////////////////////////////////////////////////

//;# Import Libs
//; use POSIX ();
//;
//  PARAMETERS:
//; my $inputWidth = parameter( name=>'InputWidth', val=>8,
//;                               doc=>'!FUNCTIONAL! Bit width of mux input');
//; my $outputWidth = parameter( name=>'OutputWidth', val=>8,
//;                               doc=>'!FUNCTIONAL! Bit width of mux output');
//; my $startPos = parameter( name=>'StartPos', val=>'left', List=>['left', 'right'],
//;                               doc=>'!FUNCTIONAL! Start position of zero [left/right]');
//; my $startLeft = $startPos eq 'left';
//; my $indexMult = parameter( name=>'IndexMult', val=>1,
//;                               doc=>'!FUNCTIONAL! Index multiplier');
//; my $indexBits = parameter( name=>'IndexBits', val=>1,
//;                               doc=>'!FUNCTIONAL! Bits to express index amount');
//; my $maxIndex = parameter( name=>'MaxIndex', val=>0,
//;                               doc=>'!FUNCTIONAL! Maximum index value');
//; if ($maxIndex == 0) {
//;     $maxIndex = 2 ** $indexBits;
//; }
//; my $indexOffset = parameter( name=>'IndexOffset', val=>0,
//;                               doc=>'!FUNCTIONAL! Offset adjustment (-ve or +ve)');

// Shifter
module `mname()`
(
    //Input Signals
    input logic [`$inputWidth-1`:0]     in_data,
    input logic [`$indexBits-1`:0]      index_amt,

    //Output Signals
    output logic [`$outputWidth-1`:0]   out_data
);

//; my $inputWidthPadded = $inputWidth;
//; if ($inputWidth < $outputWidth) {
//;     $inputWidthPadded = $outputWidth;
//;     if ($startLeft) {
wire [0:`$inputWidthPadded-1`] in_data_padded = {in_data, `$outputWidth - $inputWidth`'d0};
//;     } else {
wire [`$inputWidthPadded-1`:0] in_data_padded = {`$outputWidth - $inputWidth`'d0, in_data};
//;     }
//; } else {
//;     if ($startLeft) {
wire [0:`$inputWidthPadded-1`] in_data_padded = in_data;
//;     } else {
wire [`$inputWidthPadded-1`:0] in_data_padded = in_data;
//;     }
//; }

always_comb
begin
    unique case(index_amt)
//;     # Walk through the possible values of the index amount
//;     for (my $i = 0; $i < 2 ** $indexBits && $i <= $maxIndex; $i++) {
//;         # Begin by calculating the MSB/LSB ignoring overflow
//;         my ($firstMSB, $firstLSB);
//;         $firstMSB = ($i + $indexOffset) * $indexMult + $outputWidth - 1;
//;         $firstLSB = ($i + $indexOffset) * $indexMult;
//;
//;         # Adjust the MSB/LSB, taking into account overflow
//;         my $outDataStr;
//;         if ($startLeft) {
//;             if ($firstLSB >= $inputWidthPadded) {
//;                 $outDataStr = "'0";
//;             } elsif ($firstMSB >= $inputWidthPadded) {
//;                 $outDataStr = "{in_data_padded[$firstLSB:$inputWidthPadded - 1], " . ($firstMSB - $inputWidthPadded + 1) . "'d0}";
//;             } else {
//;                 $outDataStr = "in_data_padded[$firstLSB:$firstMSB]";
//;             }
//;         } else {
//;             if ($firstLSB >= $inputWidthPadded) {
//;                 $outDataStr = "'0";
//;             } elsif ($firstMSB >= $inputWidthPadded) {
//;                 $outDataStr = "{" . ($firstMSB - $inputWidthPadded + 1) . "'d0, in_data_padded[$firstLSB:$inputWidthPadded - 1]}";
//;             } else {
//;                 $outDataStr = "in_data_padded[$firstMSB:$firstLSB]";
//;             }
//;         }
        `$i < $maxIndex ? $i : 'default'` : out_data = `$outDataStr`;
//;     }
    endcase
end

endmodule : `mname`
