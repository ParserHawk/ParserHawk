////////////////////////////////////////////////////////////////
// lookup_table_new.vp
//    Glen Gibb grg@stanford.edu
//
// Description:
//   Simulation of a TCAM lookup table + RAM?
//
////////////////////////////////////////////////////////////////

//; # Import Libs
//; use POSIX ();
//; use Parser;
//;
//; # PARAMETERS:
//; my $tcamTableFile = parameter(name=>'TCAMTableFile', val=>'~/headers-expand-w256-ms256-l02-lw02-flaz0-e0-mh03.tcam',
//;                               doc=>'!FUNCTIONAL! File containing description of TCAM entries');
//; my $lookupWords = parameter( name=>'LookupWords', val=>2,
//;                               doc=>'!FUNCTIONAL! Number of lookup words',
//;                               min=>1 , max=>16);
//; my $lookupByteWidth = parameter( name=>'LookupWordWidth', val=>2,
//;                               doc=>'!FUNCTIONAL! Lookup word width (bytes)',
//;                               min=>1 , max=>8, step=>1);
//; my $lookupBitWidth = 8 * $lookupByteWidth;
//; my $bufByteWidth = parameter( name=>'BufWordWidth', val=>8,
//;                               doc=>'!FUNCTIONAL! Width of buffered words (bytes)',
//;                               min=>1 , max=>128);
//; my $progStateWidth = parameter( name=>'ProgStateWidth', val=>8,
//;                               doc=>'!FUNCTIONAL! Width of state variable (bits)',
//;                               min=>1 , max=>16);
//; my $byteCntWidth = log2($bufByteWidth);
//; my $evBitWidth = parameter(name=>'ExtractVectorWidth', val=>"4096",
//;                           doc=>'!FUNCTIONAL! Extract field vector width (bits)');
//; my $evByteWidth = $evBitWidth / 8;
//; my $evInputs = parameter(name=>'NumExtractVectorInputs', val=>"12",
//;                           doc=>'!FUNCTIONAL! Number of single-byte inputs to the extract field vector');
//; my $offsetTblDepth = parameter(name=>'OffsetTblDepth', val=>"16",
//;                           doc=>'!FUNCTIONAL! Number of offset entries');
//; my $hdrIdentOP = parameter( name=>'HdrIdentOP', val=>'field',
//;                               doc=>'!FUNCTIONAL! Header identification output: headers (hdr) or fields (field)',
//;                               list=>['hdr', 'field']);
//; my $opExtractBytes = $hdrIdentOP eq 'hdr' ? 0 : 1;
//; my $numHdrIdent = parameter(name=>'NumHdrIdent', val=>"3",
//;                           doc=>'!FUNCTIONAL! Number of headers identified in a single cycle');
//; my $progMaxHdrs = parameter( name=>'ProgMaxHdrs', val=>32,
//;                               doc=>'!FUNCTIONAL! Maximum number of headers',
//;                               min=>1 , max=>128, step=>1);
//; my $hdrTypeWidth = log2($progMaxHdrs);
//; my $maxRdAmt = parameter( name=>'MaxRdAmt', val=>8,
//;                               doc=>'!FUNCTIONAL! Maximum read amount (bytes)',
//;                               min=>1 , max=>128);
//; my $rdWidth = log2($maxRdAmt);
//;
//; # Verify the sanity of inputs
//; if ($evBitWidth % 8 != 0) {
//;     $self->error("Extract field vector width must be a multiple of 8 bits. Specified: $evBitWidth")
//; }
//;
//; my $evDstWidth = log2($evBitWidth);
//; my $offsetAddrWidth = log2($offsetTblDepth);

import parser_pkg::*;

// Top-level parser
module `mname()`
(
    input logic [`$progStateWidth-1`:0]                 curr_state,
    input logic [`$lookupWords*$lookupBitWidth-1`:0]    lookup_data,

    output logic [7:0]                  nxt_state,
    output logic [`$rdWidth+1-1`:0]     rd_amt,
    output logic [`$lookupWords-1`:0][`$byteCntWidth-1`:0] rd_offset,

//; if ($opExtractBytes) {
    output logic [`$evInputs-1`:0][`$byteCntWidth-1`:0] ev_src,
    output logic [`$evInputs-1`:0][`$evDstWidth-1`:0]   ev_dst,
//; }
    output logic [`$numHdrIdent-1`:0]                       found_hdr,
    output logic [`$numHdrIdent-1`:0][`$hdrTypeWidth-1`:0]  found_hdr_type,
    output logic [`$numHdrIdent-1`:0][`$byteCntWidth-1`:0]  found_hdr_pos,
    output logic [`$numHdrIdent-1`:0][7:0]                  found_hdr_size,

    // Global Signals
    input logic                 clk,
    input logic                 rst
);

////////////////////////////////////////
// Local variables
////////////////////////////////////////


////////////////////////////////////////
// Module instantiations
////////////////////////////////////////



////////////////////////////////////////
// Main logic
////////////////////////////////////////

always_comb
begin
//; if ($opExtractBytes) {
//;     for (my $i = 0; $i < $evInputs; $i++) {
    ev_src[`$i`] = '1; ev_dst[`$i`] = '1;    
//;     }
//; }
//; for (my $i = 0; $i < $numHdrIdent; $i++) {
    found_hdr[`$i`] = '0;
    found_hdr_type[`$i`] = '0;
    found_hdr_pos[`$i`] = '0;
    found_hdr_size[`$i`] = '0;
//; }

    casex ({curr_state, lookup_data})
//; # Create the lookup table
//; open TCAM_FILE, "<", expandFilename($tcamTableFile) or die $!;
//; # Skip the first line of the file (it should be fist-lookup)
//; <TCAM_FILE>;
//; while (my $line = <TCAM_FILE>) {
//;     my $entry = parseTCAMEntry($line);
//;
//;     #my $hist = $entry->{HIST};
//;     #my $state = $entry->{STATE};
//;     my $lookupStr = $entry->{'LOOKUP_STR'};
//;     my $nxtStateVal = $entry->{'NXT_STATE_VAL'};
//;     my $nxtStateMask = $entry->{'NXT_STATE_MASK'};
//;     my $lOffsets = $entry->{'LOOKUP_OFFSETS'};
//;     my $shift = $entry->{'SHIFT'};
//;
        {`$lookupStr`} : begin
            nxt_state = curr_state & ~`fmtVal($nxtStateMask, $progStateWidth)` |
                        `fmtVal($nxtStateVal, $progStateWidth)` & `fmtVal($nxtStateMask, $progStateWidth)`;
            rd_amt = `fmtVal($shift, $rdWidth+1)`;
//;
//;     for (my $i = 0; $i < $lookupWords; $i++) {
//;         my $rdAmt = 0;
//;         $rdAmt = $lOffsets->[$i] if $i < scalar(@$lOffsets);
            rd_offset[`$i`] = `fmtVal($rdAmt, $byteCntWidth)`;
//;     }
//;
//;     if ($opExtractBytes) {
//;         my $extract = $entry->{'EXTRACT'};
//;         my $hdrStarts = $entry->{'HDR_STARTS'};
//;         for (my $i = 0; $i < $evInputs; $i++) {
//;             my $evSrc = 2 ** $byteCntWidth - 1;
//;             my $evDst = 2 ** $evDstWidth - 1;
//;             if ($i * 2 < scalar(@$extract)) {
//;                 if ($extract->[2 * $1 + 1] > 0) {
//;                     $evSrc = $extract->[2 * $i];
//;                     $evDst = $extract->[2 * $i + 1] - 1;
//;                 }
//;             }
            ev_src[`$i`] = `fmtVal($evSrc, $byteCntWidth)`; ev_dst[`$i`] = `fmtVal($evDst, $evDstWidth)`;
//;         }
//;     }
//;     my $hdrStarts = $entry->{'HDR_STARTS'};
//;     for (my $i = 0; $i < $numHdrIdent; $i++) {
//;         my $hdrFound = 0;
//;         my $hdrType = 0;
//;         my $hdrPos = 0;
//;         my $hdrSize = 0;
//;         if ($i * 3 < scalar(@$hdrStarts)) {
//;             $hdrPos = $hdrStarts->[$i * 3];
//;             $hdrType = $hdrStarts->[$i * 3 + 1];
//;             $hdrSize = $hdrStarts->[$i * 3 + 2];
//;             if ($hdrType != 0) {
//;                 $hdrFound = 1;
//;             }
//;         }
            found_hdr[`$i`] = `fmtVal($hdrFound, 1)`; found_hdr_type[`$i`] = `fmtVal($hdrType, $hdrTypeWidth)`; found_hdr_pos[`$i`] = `fmtVal($hdrPos, $byteCntWidth)`; found_hdr_size[`$i`] = `fmtVal($hdrSize, 8)`;
//;     }
        end

//; }
//;
        default : begin
            nxt_state = `fmtVal(2 ** $progStateWidth - 1, $progStateWidth)`;
            rd_amt = `fmtVal($bufByteWidth, $rdWidth+1)`;
//;
//;     for (my $i = 0; $i < $lookupWords; $i++) {
            rd_offset[`$i`] = `fmtVal(0, $byteCntWidth)`;
//;     }
//;
//;     if ($opExtractBytes) {
//;         for (my $i = 0; $i < $evInputs; $i++) {
//;             my $evSrc = 2 ** $byteCntWidth - 1;
//;             my $evDst = 2 ** $evDstWidth - 1;
            ev_src[`$i`] = `fmtVal($evSrc, $byteCntWidth)`; ev_dst[`$i`] = `fmtVal($evDst, $evDstWidth)`;
//;         }
//;     } else {
//;         for (my $i = 0; $i < $numHdrIdent; $i++) {
//;             my $hdrFound = 0;
//;             my $hdrType = 0;
//;             my $hdrPos = 0;
            found_hdr[`$i`] = `fmtVal($hdrFound, 1)`; found_hdr_type[`$i`] = `fmtVal($hdrType, $hdrTypeWidth)`; found_hdr_pos[`$i`] = `fmtVal($hdrPos, $byteCntWidth)`;
//;         }
//;     }
        end
    endcase
end



////////////////////////////////////////
// Verification code
////////////////////////////////////////

// synthesis translate_off
// synopsys translate_off

// synopsys translate_on
// synthesis translate_on

endmodule : `mname`
